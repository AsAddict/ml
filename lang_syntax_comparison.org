* Cloure && Python && Csharp && Cc && Perl
** builtin container
*** association container
map in cc
** lamba
clojure and python are both weak-type lang.

+ clojure simple but powerful :-)
#+begin_src clojure
(def less #(% < %2))
#+end_src

+ python expression limitation
prohibition for parentheses for lambda paramters in python.
and it seems to be only one statement in python..
#+begin_src python :results ouput
less = lambda t1, t2: t1.mAttr < t2.mAttr
less(0, 1) #true
#+end_src

+ reasonable cc lambda
We just need instantilate the "function" class' template for supplying the return type and parameters type then this lambda's type is ready to go!
#+begin_src c++
function <bool (const int, const int)> less = [](const int, const int) {retrun a < b;};
cmp(3, 4); //true
#+end_src

+ csharp lambda
First we need to define a new delagate type(or just use the builtin deltegates) for the function'info, and we could employ generic tech there.
#+begin_src csharp
delegate bool CompareTwo<T1, T2> (T1 t1, T2 t2);
CompareTwo<int, int> less = (t1, t2) => t1 < t2;
less(0, 1); // true

// avoid generic should be totally fine
delegate bool CompareTwoInt (int t1, int t2);
CompareTwoInt less = (t1, t2) => t1 < t2;
less(0, 1); // true
#+end_src

I more prefer cc's way owning to its intuition.

the lambda's parameters in csharp need no Type, that's because those lambdas have to be "reasonable" when they are being assigned to a Delegate object, then those parameters and return value have their types. the lamba in c++ is straightforward since all parameters and return values are needed for lambda itself, so it could assigned to an "auto" anoymous type variable, and we could assign an lambda to a method template' s parameter as:

#+begin_src c++
template<class T>
void foo(T cmp){
  cout << cmp(2,3) << endl; // error in csharp
}

int main(){
  auto _cmp = [](const int a, const int b) {return a < b;};
  foo(_cmp);
  return 1;
}
#+end_src

** linear container implementation
*** notations   
    + Linear container
      Vector (implemented by array for linear data structure)
      List (implemented by linked list for linear data structure)
**** clojure     
** concurrency & multi-thread in clojure
* Clojure && Python
** keyword parameter
Arameters with default value, and could avoid forcing the arguments
order when calling function.

Python is born supporting keyword parameter
#+begin_src python
## parameters with default values have to be listed last.
def make_user(username, join_date, email = "default@email.com"):
    return {'username':username, 'email':email, 'join-date':join_date}
#+end_src

Some tricks could help clojure has keyword parameter as python does.
#+begin_src clojure
;; rest even elems in vector could be treated as dict when using dict unpacking
(defn make-user
  [user-name & {:keys [email join-date] :or {join-date (java.util.Date.)
                                             email "default@email.com"}}]
  {:user-name user-name :emal email :join-date join-date}
  )
(make-user "bobby" :email "642772378@qq.com")
(make-user "tom")
#+end_src

** Python's generator and Clojure's lazy-seq
   Lazy-seq in clojure store datas on the fly as python's generator does,
   but python's generator just could be consumed once versus lazy-seq could
   be consumed unlimitly but maintains the first consumed values.
   
   e.g. unlimit sequence of rand-ints
   #+begin_src clojure
   (defn rand-ints
     [limit]
     (lazy-seq (cons (rand-int limit) (rand-ints limit))))
   #+end_src

   #+begin_src python
   import random
   def rand_ints(limit):
       yield random.randint(0, limit)
       for _i in rand_ints(limit):
           yield _i
   #+end_src

   Notice that in clojure it's much easier get n from such sequence with
   "take macro" versus in python it's trivial to finish same functionality.

   
   
   
